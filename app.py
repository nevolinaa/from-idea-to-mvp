import pandas as pd
import streamlit as st
from PIL import Image
from model import open_data, preprocess_data, split_data, load_model_and_predict

def process_main_page():
    show_main_page()
    process_side_bar_inputs()

def show_main_page():
    image = Image.open('./data/family.png')

    st.set_page_config(
        page_icon = "üåé",
        layout="centered",
        initial_sidebar_state="collapsed",
        page_title="SatisFlight",
    )

    st.write(
        """
        # –£–∑–Ω–∞–π—Ç–µ, –¥–æ–≤–æ–ª–µ–Ω –ª–∏ –í–∞—à –ø–∞—Å—Å–∞–∂–∏—Ä –ø–µ—Ä–µ–ª–µ—Ç–æ–º
        """
    )

    st.image(image)

def write_user_data(df):
    st.write("## –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ")
    st.write(df)

def write_prediction(prediction, prediction_probas):
    st.write("## –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
    st.write(prediction)

    st.write("## –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    st.write(prediction_probas)

def process_side_bar_inputs():
    user_input_df = sidebar_input_features()

    if (st.button('–ì–æ—Ç–æ–≤–æ')):
        train_df = open_data()
        train_X_df, _ = split_data(train_df)
        full_X_df = pd.concat((user_input_df, train_X_df), axis=0, ignore_index=True)
        preprocessed_X_df = preprocess_data(full_X_df, test=False)

        user_X_df = preprocessed_X_df[:1]
        write_user_data(user_X_df)

        prediction, prediction_probas = load_model_and_predict(user_X_df)
        write_prediction(prediction, prediction_probas)
        
        st.divider()
        st.subheader("–°–ø—Ä–∞–≤–∫–∞")
        st.markdown(
            """
            –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–¥–µ–ª–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ **81038** –Ω–∞–±–ª—é–¥–µ–Ω–∏–π, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö:
            - **45%** –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–ª–µ—Ç–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
            - **82%** –ª–æ—è–ª—å–Ω—ã—Ö –∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
            - **48%** –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞
            - **30%** –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, —Å—Ç–æ–ª–∫–Ω—É–≤—à–∏—Ö—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Ä–µ–π—Å–∞
            """
        )

def sidebar_input_features():
    st.write("### –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ ")

    type = st.selectbox("–ü–∞—Å—Å–∞–∂–∏—Ä –ª–æ—è–ª–µ–Ω –∫ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏?", ('–î–∞', '–ù–µ—Ç'))

    pclass = st.selectbox("–ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞", ("–≠–∫–æ–Ω–æ–º", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ë–∏–∑–Ω–µ—Å"))

    delay = st.selectbox("–ë—ã–ª–∏ –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ä–µ–π—Å–∞?", ("–î–∞", "–ù–µ—Ç"))

    checkin = st.select_slider('–û—Ü–µ–Ω–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–µ–π—Å, –≥–¥–µ 1 ‚Äì —ç—Ç–æ ¬´–ø–ª–æ—Ö–æ¬ª, –∞ 5 ‚Äì —ç—Ç–æ ¬´–æ—Ç–ª–∏—á–Ω–æ¬ª',
                               options=[1, 2, 3, 4, 5])

    on_board = st.select_slider('–û—Ü–µ–Ω–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –±–æ—Ä—Ç—É, –≥–¥–µ 1 ‚Äì —ç—Ç–æ ¬´–ø–ª–æ—Ö–æ¬ª, –∞ 5 ‚Äì —ç—Ç–æ ¬´–æ—Ç–ª–∏—á–Ω–æ¬ª',
                             options=[1, 2, 3, 4, 5])

    seat_comfort = st.select_slider('–û—Ü–µ–Ω–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º —É–¥–æ–±—Å—Ç–≤–∞ —Å–∏–¥–µ–Ω—å—è, –≥–¥–µ 1 ‚Äì —ç—Ç–æ ¬´–ø–ª–æ—Ö–æ¬ª, –∞ 5 ‚Äì —ç—Ç–æ ¬´–æ—Ç–ª–∏—á–Ω–æ¬ª',
                               options=[1, 2, 3, 4, 5])

    cleanliness = st.select_slider('–û—Ü–µ–Ω–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º —á–∏—Å—Ç–æ—Ç—ã –Ω–∞ –±–æ—Ä—Ç—É, –≥–¥–µ 1 ‚Äì —ç—Ç–æ ¬´–ø–ª–æ—Ö–æ¬ª, –∞ 5 ‚Äì —ç—Ç–æ ¬´–æ—Ç–ª–∏—á–Ω–æ¬ª',
                                    options=[1, 2, 3, 4, 5])

    translatetion = {
        "–î–∞": 1,
        "–ù–µ—Ç": 0,
        "–ë–∏–∑–Ω–µ—Å": "Business",
        "–ö–æ–º—Ñ–æ—Ä—Ç": "Eco Plus",
        "–≠–∫–æ–Ω–æ–º": "Eco"
    }

    data = {
        'Customer Type': translatetion[type],
        'On-board service': on_board,
        'Checkin service': checkin,
        'Seat comfort': seat_comfort,
        'Cleanliness': cleanliness,
        'Class': translatetion[pclass],
        'Any Arrival Delay': translatetion[delay]
    }

    df = pd.DataFrame(data, index=[0])

    return df


if __name__ == "__main__":
    process_main_page()
